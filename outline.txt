
# Refactoring Plan: Orbital8 Goji to ES6 Modules

## 1. Preamble & Execution Approach

**Purpose:**
This document outlines the strategic plan to refactor the monolithic JavaScript application within `performance.html` into a modern, maintainable, and scalable ES6 module architecture. The primary goal is to improve code organization, decouple components, and establish a clear separation of concerns. This will make future development, debugging, and feature enhancements significantly more efficient.

**Execution Approach:**
This is a planning document only. The execution will occur in a subsequent phase in a new repository or branch. The process will be as follows:
1.  Create the new directory and file structure as defined in the "Target Structure" section below.
2.  Using the "Refactoring Instructions (JSON)" as a guide, systematically extract the specified classes, objects, and functions from the `performance.html` script block and place them into their corresponding new module files.
3.  Refactor the code in each module to use `import` and `export` statements for handling dependencies, replacing the reliance on a shared global scope.
4.  Create a new `index.html` that is a clean version of `performance.html`, containing only the HTML structure and a single script tag: `<script type="module" src="index.js"></script>`.
5.  The `index.js` file will be the main entry point, responsible for importing necessary modules and initializing the application.

---

## 2. Target Directory & File Structure

The new repository will be organized as follows:

```
/
├── index.html              // Main application HTML file
├── index.js                // Main application entry point and initializer
|
├── core/
│   ├── state.js            // Centralized application state management
│   └── app.js              // Core application logic (the `App` object)
│
├── modules/
│   ├── coreLogic.js        // The `Core` object logic (image display, stacks)
│   ├── gestures.js         // The `Gestures` object (swipe, tap, zoom)
│   ├── sync.js             // The `SyncManager` class
│   ├── export.js           // The `ExportSystem` class
│   └── folders.js          // The `Folders` object (folder screen logic)
│
├── ui/
│   ├── dom.js              // Centralized DOM element references
│   ├── uiController.js     // The `UI` object (event listeners, UI updates)
│   ├── modals/
│   │   ├── grid.js         // The `Grid` object logic
│   │   ├── details.js      // The `Details` object logic
│   │   └── action.js       // The `Modal` object logic
│
├── providers/
│   ├── googleDrive.js      // The `GoogleDriveProvider` class
│   └── oneDrive.js         // The `OneDriveProvider` class
│
└── lib/
    ├── db.js               // The `DBManager` class
    ├── metadata.js         // The `MetadataExtractor` class
    ├── utils.js            // Standalone utility functions (debounce, etc.)
    └── feedback.js         // VisualCueManager and HapticFeedbackManager
```

---

## 3. Refactoring Instructions (JSON)

This JSON object maps the source code from `performance.html` to the new modular structure.

```json
{
  "refactoringMap": [
    {
      "targetFile": "index.js",
      "sourceObjects": [],
      "sourceFunctions": ["window.onload"],
      "notes": "The main entry point. Will initialize all core systems by importing from other modules and calling their init functions."
    },
    {
      "targetFile": "core/state.js",
      "sourceObjects": ["state", "STACKS", "STACK_NAMES", "FOLDER_CACHE_SIZE"],
      "sourceFunctions": [],
      "notes": "Export the state object and constants. All other modules will import from here. Avoids global scope."
    },
    {
      "targetFile": "core/app.js",
      "sourceObjects": ["App"],
      "sourceFunctions": [],
      "notes": "Contains the main application setup and image loading logic. Depends on `state.js`, provider modules, and `coreLogic.js`."
    },
    {
      "targetFile": "ui/dom.js",
      "sourceObjects": [],
      "sourceFunctions": ["Utils.init"],
      "notes": "This module will contain the `elements` object, populated by the `init` function. It will export the `elements` object for other UI modules to use. The original `Utils` object will be dismantled."
    },
    {
      "targetFile": "lib/utils.js",
      "sourceObjects": [],
      "sourceFunctions": ["Utils.showToast", "Utils.setImageSrc", "Utils.getPreferredImageUrl", "Utils.getFallbackImageUrl", "Utils.formatFileSize", "Utils.updateLoadingProgress", "Utils.debounce", "Utils.showScreen", "Utils.showModal", "Utils.hideModal"],
      "notes": "A collection of generic, reusable utility functions that were previously part of the `Utils` object."
    },
    {
      "targetFile": "lib/feedback.js",
      "sourceObjects": ["VisualCueManager", "HapticFeedbackManager"],
      "sourceFunctions": [],
      "notes": "Isolates the user feedback mechanisms."
    },
    {
      "targetFile": "lib/db.js",
      "sourceObjects": ["DBManager"],
      "sourceFunctions": [],
      "notes": "Dedicated module for IndexedDB interactions."
    },
    {
      "targetFile": "lib/metadata.js",
      "sourceObjects": ["MetadataExtractor"],
      "sourceFunctions": [],
      "notes": "Handles fetching and parsing of embedded PNG metadata."
    },
    {
      "targetFile": "providers/googleDrive.js",
      "sourceObjects": ["GoogleDriveProvider"],
      "sourceFunctions": [],
      "notes": "Self-contained module for all Google Drive API interactions and authentication."
    },
    {
      "targetFile": "providers/oneDrive.js",
      "sourceObjects": ["OneDriveProvider"],
      "sourceFunctions": [],
      "notes": "Self-contained module for all Microsoft Graph API (OneDrive) interactions and authentication."
    },
    {
      "targetFile": "modules/sync.js",
      "sourceObjects": ["SyncManager"],
      "sourceFunctions": [],
      "notes": "Manages the web worker for background data synchronization."
    },
    {
      "targetFile": "modules/export.js",
      "sourceObjects": ["ExportSystem"],
      "sourceFunctions": [],
      "notes": "Handles the logic for exporting data to CSV."
    },
    {
      "targetFile": "modules/coreLogic.js",
      "sourceObjects": ["Core"],
      "sourceFunctions": [],
      "notes": "Manages the core logic of stack management, image display, and navigation between images."
    },
    {
      "targetFile": "ui/modals/grid.js",
      "sourceObjects": ["Grid"],
      "sourceFunctions": [],
      "notes": "Controls all functionality of the grid view modal, including lazy loading, selection, and search."
    },
    {
      "targetFile": "ui/modals/details.js",
      "sourceObjects": ["Details"],
      "sourceFunctions": [],
      "notes": "Controls the image details modal, including its various tabs (Info, Tags, Notes, Metadata)."
    },
    {
      "targetFile": "ui/modals/action.js",
      "sourceObjects": ["Modal"],
      "sourceFunctions": [],
      "notes": "Manages the generic action/confirmation modal for bulk operations like move, tag, and delete."
    },
    {
      "targetFile": "modules/gestures.js",
      "sourceObjects": ["Gestures"],
      "sourceFunctions": [],
      "notes": "Handles all user input gestures: swipe for sorting, tap for focus mode, pinch-to-zoom."
    },
    {
      "targetFile": "ui/uiController.js",
      "sourceObjects": ["UI"],
      "sourceFunctions": [],
      "notes": "The main UI controller, responsible for binding all top-level event listeners to the DOM."
    },
    {
      "targetFile": "modules/folders.js",
      "sourceObjects": ["Folders"],
      "sourceFunctions": [],
      "notes": "Manages the logic for the folder selection screens for both providers."
    }
  ]
}
```

---

## 4. Outstanding Issues & Refactoring Opportunities

*   **Global State Management:** While `state.js` centralizes the state object, it's still a mutable global. A more robust solution could involve a state management pattern (like publisher/subscriber) to manage state changes more predictably and traceably.
*   **DOM Manipulation:** The code directly manipulates the DOM (e.g., `innerHTML = '...'`). This could be refactored to use a more declarative approach with helper functions that create and append elements. This would improve security (XSS prevention) and readability.
*   **Component-like Structure:** The objects (`Grid`, `Details`, `Modal`) act like components but lack a formal structure. They could be refactored into classes with `render()` and `bindEvents()` methods for a clearer lifecycle.
*   **Error Handling:** Error handling is present but could be centralized. A dedicated error handling module could log errors and display user-friendly messages, making the app more robust.
*   **Code Consolidation:**
    *   The `GoogleDriveProvider` and `OneDriveProvider` share a common interface but are not formally abstracted. An abstract `StorageProvider` class could be created to enforce the interface (`getFolders`, `getFilesAndMetadata`, etc.), making it easier to add new providers in the future.
    *   The various modal objects (`Grid`, `Details`, `Modal`) could be managed by a parent `ModalManager` that handles the generic showing/hiding and focus trapping, while the specific modals handle only their own content and logic.

---

## 5. Storage Provider-Specific Modules

These modules contain code that is tightly coupled to a specific cloud storage provider's API and authentication flow. They are the primary candidates for abstraction if more providers are to be added in the future.

*   `providers/googleDrive.js`
*   `providers/oneDrive.js`

Additionally, parts of `modules/sync.js` (specifically the web worker's `syncGoogleDrive` and `syncOneDrive` functions) and `modules/folders.js` (which calls provider-specific methods) are inherently provider-aware.
